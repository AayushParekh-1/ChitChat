
What is JSON Web Token (JWT)?
-----------------------------
- JWT is an open standard (RFC 7519) for securely transmitting information as a JSON object.
- Compact, self-contained, can be sent via HTTP headers, URLs, or cookies.

Structure of JWT
-----------------
- Header: type & signing algorithm
- Payload: data (claims like user id, role)
- Signature: ensures token wasnâ€™t tampered

Looks like:
eyJhbGciOi...<header>.<payload>.<signature>

How does JWT work?
-------------------
1. User logs in, server verifies credentials.
2. Server creates a JWT with user data, signs it.
3. Sends JWT to client. Client stores it.
4. Client sends JWT in 'Authorization: Bearer' header on requests.
5. Server verifies signature. If valid, proceeds.

Authentication vs Authorization
-------------------------------
| Authentication      | Authorization              |
|----------------------|---------------------------|
| Who you are          | What you can do            |
| Login credentials    | Role/permissions checking |
| Always happens first | Happens after auth         |

JWT vs Sessions
---------------
| JWT                    | Sessions                 |
|-------------------------|-------------------------|
| Client stores token     | Server stores session   |
| Stateless, easy scaling | Stateful, harder scaling|
| Hard to revoke          | Easy to destroy session |
| Exp in token (client)   | Server controls expiry  |

Summary
-------
- JWT is stateless, stored on client, signed for integrity.
- Sessions store data on server, easier to revoke.
- Use JWT for APIs & scaling, Sessions for more control.
